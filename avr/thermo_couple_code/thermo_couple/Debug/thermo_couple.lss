
thermo_couple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000057c  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006c  0080006c  0000061c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bc  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000687  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040e  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000388  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030e  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000212a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	5b 00       	.word	0x005b	; ????
  56:	5e 00       	.word	0x005e	; ????
  58:	61 00       	.word	0x0061	; ????
  5a:	64 00       	.word	0x0064	; ????
  5c:	67 00       	.word	0x0067	; ????
  5e:	6a 00       	.word	0x006a	; ????
  60:	6d 00       	.word	0x006d	; ????
  62:	70 00       	.word	0x0070	; ????
  64:	73 00       	.word	0x0073	; ????
  66:	76 00       	.word	0x0076	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 37       	cpi	r26, 0x74	; 116
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 38 01 	call	0x270	; 0x270 <main>
  9e:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <seven_sgment>:
#include <avr/io.h>
#include <util/delay.h>

int seven_sgment(int x){
	int y =0;
	switch (x){
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	91 05       	cpc	r25, r1
  aa:	18 f5       	brcc	.+70     	; 0xf2 <seven_sgment+0x4c>
  ac:	fc 01       	movw	r30, r24
  ae:	e6 5d       	subi	r30, 0xD6	; 214
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	0c 94 a2 02 	jmp	0x544	; 0x544 <__tablejump2__>
		case 0:
		y = ~0b11111100;
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	9f ef       	ldi	r25, 0xFF	; 255
  ba:	08 95       	ret
		break;
		case 1:
		y = ~0b01100000;
  bc:	8f e9       	ldi	r24, 0x9F	; 159
  be:	9f ef       	ldi	r25, 0xFF	; 255
		break;
  c0:	08 95       	ret
		case 2:
		y = ~0b11011010;
  c2:	85 e2       	ldi	r24, 0x25	; 37
  c4:	9f ef       	ldi	r25, 0xFF	; 255
		break;
  c6:	08 95       	ret
		case 3:
		y = ~0b11110010;
  c8:	8d e0       	ldi	r24, 0x0D	; 13
  ca:	9f ef       	ldi	r25, 0xFF	; 255
		break;
  cc:	08 95       	ret
		case 4:
		y = ~0b01100110;
  ce:	89 e9       	ldi	r24, 0x99	; 153
  d0:	9f ef       	ldi	r25, 0xFF	; 255
		break;
  d2:	08 95       	ret
		case 5:
		y = ~0b10110110;
  d4:	89 e4       	ldi	r24, 0x49	; 73
  d6:	9f ef       	ldi	r25, 0xFF	; 255
		break;
  d8:	08 95       	ret
		case 6:
		y = ~0b10111110;
  da:	81 e4       	ldi	r24, 0x41	; 65
  dc:	9f ef       	ldi	r25, 0xFF	; 255
		break;
  de:	08 95       	ret
		case 7:
		y = ~0b11100000;
  e0:	8f e1       	ldi	r24, 0x1F	; 31
  e2:	9f ef       	ldi	r25, 0xFF	; 255
		break;
  e4:	08 95       	ret
		case 8:
		y = ~0b11111110;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	9f ef       	ldi	r25, 0xFF	; 255
		break;
  ea:	08 95       	ret
		case 9:
		y = ~0b11110110;
  ec:	89 e0       	ldi	r24, 0x09	; 9
  ee:	9f ef       	ldi	r25, 0xFF	; 255
		break;
  f0:	08 95       	ret
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

int seven_sgment(int x){
	int y =0;
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
		case 9:
		y = ~0b11110110;
		break;
	}
	return y;
}
  f6:	08 95       	ret

000000f8 <serial_avr>:
int b = 0;
int16_t v;
double temp;
//double FIRST;

void serial_avr(char *str){
  f8:	fc 01       	movw	r30, r24
	UCSRB = (1<<TXEN);
  fa:	88 e0       	ldi	r24, 0x08	; 8
  fc:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
  fe:	86 e8       	ldi	r24, 0x86	; 134
 100:	80 bd       	out	0x20, r24	; 32
	UBRRL = 51;
 102:	83 e3       	ldi	r24, 0x33	; 51
 104:	89 b9       	out	0x09, r24	; 9
	for (unsigned int i =0 ; str[i]!=0;i++){
 106:	90 81       	ld	r25, Z
 108:	99 23       	and	r25, r25
 10a:	39 f0       	breq	.+14     	; 0x11a <serial_avr+0x22>
 10c:	31 96       	adiw	r30, 0x01	; 1
		UDR = str[i];
 10e:	9c b9       	out	0x0c, r25	; 12
		while (!(UCSRA&(1<<UDRE)));
 110:	5d 9b       	sbis	0x0b, 5	; 11
 112:	fe cf       	rjmp	.-4      	; 0x110 <serial_avr+0x18>

void serial_avr(char *str){
	UCSRB = (1<<TXEN);
	UCSRC=(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
	UBRRL = 51;
	for (unsigned int i =0 ; str[i]!=0;i++){
 114:	91 91       	ld	r25, Z+
 116:	91 11       	cpse	r25, r1
 118:	fa cf       	rjmp	.-12     	; 0x10e <serial_avr+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	2f e9       	ldi	r18, 0x9F	; 159
 11c:	86 e8       	ldi	r24, 0x86	; 134
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <serial_avr+0x28>
 128:	00 c0       	rjmp	.+0      	; 0x12a <serial_avr+0x32>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <spi_get>:
		
	}
	_delay_ms(500);
}
int spi_get (void){
	b=0;
 12e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__data_end+0x1>
 132:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
	for (int i=0 ;i<8;i++){
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
		PORTB &= ~(1<<spi_sck);
 13a:	e4 e6       	ldi	r30, 0x64	; 100
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(1);
		if(PINB & (1<<spi_mosi)){
 142:	a0 e6       	ldi	r26, 0x60	; 96
 144:	b0 e0       	ldi	r27, 0x00	; 0
	_delay_ms(500);
}
int spi_get (void){
	b=0;
	for (int i=0 ;i<8;i++){
		PORTB &= ~(1<<spi_sck);
 146:	98 b3       	in	r25, 0x18	; 24
 148:	ba 01       	movw	r22, r20
 14a:	00 80       	ld	r0, Z
 14c:	02 c0       	rjmp	.+4      	; 0x152 <spi_get+0x24>
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <spi_get+0x20>
 156:	86 2f       	mov	r24, r22
 158:	80 95       	com	r24
 15a:	89 23       	and	r24, r25
 15c:	88 bb       	out	0x18, r24	; 24
 15e:	89 ef       	ldi	r24, 0xF9	; 249
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <spi_get+0x34>
 166:	00 c0       	rjmp	.+0      	; 0x168 <spi_get+0x3a>
 168:	00 00       	nop
		_delay_ms(1);
		if(PINB & (1<<spi_mosi)){
 16a:	86 b3       	in	r24, 0x16	; 22
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0c 90       	ld	r0, X
 170:	02 c0       	rjmp	.+4      	; 0x176 <spi_get+0x48>
 172:	95 95       	asr	r25
 174:	87 95       	ror	r24
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <spi_get+0x44>
 17a:	80 ff       	sbrs	r24, 0
 17c:	11 c0       	rjmp	.+34     	; 0x1a0 <spi_get+0x72>
		b |= (1<<i)	;
 17e:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <__data_end>
 182:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <__data_end+0x1>
 186:	ca 01       	movw	r24, r20
 188:	02 2e       	mov	r0, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <spi_get+0x62>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <spi_get+0x5e>
 194:	86 2b       	or	r24, r22
 196:	97 2b       	or	r25, r23
 198:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 19c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		}
	
		PORTB |= (1<<spi_sck);
 1a0:	68 b3       	in	r22, 0x18	; 24
 1a2:	ca 01       	movw	r24, r20
 1a4:	00 80       	ld	r0, Z
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <spi_get+0x7e>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <spi_get+0x7a>
 1b0:	86 2b       	or	r24, r22
 1b2:	88 bb       	out	0x18, r24	; 24
	}
	_delay_ms(500);
}
int spi_get (void){
	b=0;
	for (int i=0 ;i<8;i++){
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	28 30       	cpi	r18, 0x08	; 8
 1ba:	31 05       	cpc	r19, r1
 1bc:	21 f6       	brne	.-120    	; 0x146 <spi_get+0x18>
		}
	
		PORTB |= (1<<spi_sck);
	}
	return b;
}
 1be:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1c2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 1c6:	08 95       	ret

000001c8 <read_cel>:

double read_cel(void){
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
	PORTB &= ~(1<<spi_ss);
 1d0:	98 b3       	in	r25, 0x18	; 24
 1d2:	02 e6       	ldi	r16, 0x62	; 98
 1d4:	10 e0       	ldi	r17, 0x00	; 0
 1d6:	c1 e0       	ldi	r28, 0x01	; 1
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
 1da:	9e 01       	movw	r18, r28
 1dc:	f8 01       	movw	r30, r16
 1de:	00 80       	ld	r0, Z
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <read_cel+0x1e>
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <read_cel+0x1a>
 1ea:	82 2f       	mov	r24, r18
 1ec:	80 95       	com	r24
 1ee:	89 23       	and	r24, r25
 1f0:	88 bb       	out	0x18, r24	; 24
    
	v=0;
 1f2:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <v+0x1>
 1f6:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <v>
	v= spi_get();
 1fa:	0e 94 97 00 	call	0x12e	; 0x12e <spi_get>
	v <<= 8 ;
 1fe:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <v>
 202:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <v+0x1>
	v |= spi_get();
 206:	0e 94 97 00 	call	0x12e	; 0x12e <spi_get>
 20a:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <v>
 20e:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <v+0x1>
 212:	82 2b       	or	r24, r18
 214:	93 2b       	or	r25, r19
 216:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <v+0x1>
 21a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <v>
	
    PORTB |= (1<<spi_ss);	
 21e:	88 b3       	in	r24, 0x18	; 24
 220:	f8 01       	movw	r30, r16
 222:	00 80       	ld	r0, Z
 224:	02 c0       	rjmp	.+4      	; 0x22a <read_cel+0x62>
 226:	cc 0f       	add	r28, r28
 228:	dd 1f       	adc	r29, r29
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <read_cel+0x5e>
 22e:	c8 2b       	or	r28, r24
 230:	c8 bb       	out	0x18, r28	; 24

	v >>= 3;
 232:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <v>
 236:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <v+0x1>
 23a:	75 95       	asr	r23
 23c:	67 95       	ror	r22
 23e:	75 95       	asr	r23
 240:	67 95       	ror	r22
 242:	75 95       	asr	r23
 244:	67 95       	ror	r22
 246:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <v+0x1>
 24a:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <v>
	
	return v*0.25;
 24e:	07 2e       	mov	r0, r23
 250:	00 0c       	add	r0, r0
 252:	88 0b       	sbc	r24, r24
 254:	99 0b       	sbc	r25, r25
 256:	0e 94 95 01 	call	0x32a	; 0x32a <__floatsisf>
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	40 e8       	ldi	r20, 0x80	; 128
 260:	5e e3       	ldi	r21, 0x3E	; 62
 262:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__mulsf3>
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <main>:

int main(void)
{
	DDRB = 0;
 270:	17 ba       	out	0x17, r1	; 23
	DDRB |= (1<<spi_sck)|(1<<spi_ss);
 272:	27 b3       	in	r18, 0x17	; 23
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	ac 01       	movw	r20, r24
 27a:	00 90 64 00 	lds	r0, 0x0064	; 0x800064 <spi_sck>
 27e:	02 c0       	rjmp	.+4      	; 0x284 <main+0x14>
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <main+0x10>
 288:	00 90 62 00 	lds	r0, 0x0062	; 0x800062 <spi_ss>
 28c:	02 c0       	rjmp	.+4      	; 0x292 <main+0x22>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <main+0x1e>
 296:	84 2b       	or	r24, r20
 298:	82 2b       	or	r24, r18
 29a:	87 bb       	out	0x17, r24	; 23
    DDRA = 0xFF;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 2a0:	84 bb       	out	0x14, r24	; 20
   
    serial_avr("temp");  
 2a2:	86 e6       	ldi	r24, 0x66	; 102
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 7c 00 	call	0xf8	; 0xf8 <serial_avr>
    {
		_delay_ms(500);
		
	  temp = read_cel();
	  
	  for(int i =1 ; i<100; i++){
 2aa:	cc 24       	eor	r12, r12
 2ac:	c3 94       	inc	r12
 2ae:	d1 2c       	mov	r13, r1
		PORTA = seven_sgment((i-(i%10))/10);
 2b0:	0f 2e       	mov	r0, r31
 2b2:	fa e0       	ldi	r31, 0x0A	; 10
 2b4:	ef 2e       	mov	r14, r31
 2b6:	f1 2c       	mov	r15, r1
 2b8:	f0 2d       	mov	r31, r0
 2ba:	2f e9       	ldi	r18, 0x9F	; 159
 2bc:	86 e8       	ldi	r24, 0x86	; 134
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x50>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x5a>
 2ca:	00 00       	nop
    serial_avr("temp");  
    while (1) 
    {
		_delay_ms(500);
		
	  temp = read_cel();
 2cc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <read_cel>
 2d0:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <temp>
 2d4:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <temp+0x1>
 2d8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <temp+0x2>
 2dc:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <temp+0x3>
	  
	  for(int i =1 ; i<100; i++){
 2e0:	cc 2d       	mov	r28, r12
 2e2:	dd 2d       	mov	r29, r13
		PORTA = seven_sgment((i-(i%10))/10);
 2e4:	ce 01       	movw	r24, r28
 2e6:	b7 01       	movw	r22, r14
 2e8:	0e 94 8e 02 	call	0x51c	; 0x51c <__divmodhi4>
 2ec:	8c 01       	movw	r16, r24
 2ee:	ce 01       	movw	r24, r28
 2f0:	80 1b       	sub	r24, r16
 2f2:	91 0b       	sbc	r25, r17
 2f4:	b7 01       	movw	r22, r14
 2f6:	0e 94 8e 02 	call	0x51c	; 0x51c <__divmodhi4>
 2fa:	cb 01       	movw	r24, r22
 2fc:	0e 94 53 00 	call	0xa6	; 0xa6 <seven_sgment>
 300:	8b bb       	out	0x1b, r24	; 27
		PORTC = seven_sgment(i%10);
 302:	c8 01       	movw	r24, r16
 304:	0e 94 53 00 	call	0xa6	; 0xa6 <seven_sgment>
 308:	85 bb       	out	0x15, r24	; 21
 30a:	9f e9       	ldi	r25, 0x9F	; 159
 30c:	26 e8       	ldi	r18, 0x86	; 134
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	91 50       	subi	r25, 0x01	; 1
 312:	20 40       	sbci	r18, 0x00	; 0
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0xa0>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0xaa>
 31a:	00 00       	nop
    {
		_delay_ms(500);
		
	  temp = read_cel();
	  
	  for(int i =1 ; i<100; i++){
 31c:	21 96       	adiw	r28, 0x01	; 1
 31e:	c4 36       	cpi	r28, 0x64	; 100
 320:	d1 05       	cpc	r29, r1
 322:	01 f7       	brne	.-64     	; 0x2e4 <main+0x74>
 324:	ca cf       	rjmp	.-108    	; 0x2ba <main+0x4a>

00000326 <__floatunsisf>:
 326:	e8 94       	clt
 328:	09 c0       	rjmp	.+18     	; 0x33c <__floatsisf+0x12>

0000032a <__floatsisf>:
 32a:	97 fb       	bst	r25, 7
 32c:	3e f4       	brtc	.+14     	; 0x33c <__floatsisf+0x12>
 32e:	90 95       	com	r25
 330:	80 95       	com	r24
 332:	70 95       	com	r23
 334:	61 95       	neg	r22
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	8f 4f       	sbci	r24, 0xFF	; 255
 33a:	9f 4f       	sbci	r25, 0xFF	; 255
 33c:	99 23       	and	r25, r25
 33e:	a9 f0       	breq	.+42     	; 0x36a <__floatsisf+0x40>
 340:	f9 2f       	mov	r31, r25
 342:	96 e9       	ldi	r25, 0x96	; 150
 344:	bb 27       	eor	r27, r27
 346:	93 95       	inc	r25
 348:	f6 95       	lsr	r31
 34a:	87 95       	ror	r24
 34c:	77 95       	ror	r23
 34e:	67 95       	ror	r22
 350:	b7 95       	ror	r27
 352:	f1 11       	cpse	r31, r1
 354:	f8 cf       	rjmp	.-16     	; 0x346 <__floatsisf+0x1c>
 356:	fa f4       	brpl	.+62     	; 0x396 <__floatsisf+0x6c>
 358:	bb 0f       	add	r27, r27
 35a:	11 f4       	brne	.+4      	; 0x360 <__floatsisf+0x36>
 35c:	60 ff       	sbrs	r22, 0
 35e:	1b c0       	rjmp	.+54     	; 0x396 <__floatsisf+0x6c>
 360:	6f 5f       	subi	r22, 0xFF	; 255
 362:	7f 4f       	sbci	r23, 0xFF	; 255
 364:	8f 4f       	sbci	r24, 0xFF	; 255
 366:	9f 4f       	sbci	r25, 0xFF	; 255
 368:	16 c0       	rjmp	.+44     	; 0x396 <__floatsisf+0x6c>
 36a:	88 23       	and	r24, r24
 36c:	11 f0       	breq	.+4      	; 0x372 <__floatsisf+0x48>
 36e:	96 e9       	ldi	r25, 0x96	; 150
 370:	11 c0       	rjmp	.+34     	; 0x394 <__floatsisf+0x6a>
 372:	77 23       	and	r23, r23
 374:	21 f0       	breq	.+8      	; 0x37e <__floatsisf+0x54>
 376:	9e e8       	ldi	r25, 0x8E	; 142
 378:	87 2f       	mov	r24, r23
 37a:	76 2f       	mov	r23, r22
 37c:	05 c0       	rjmp	.+10     	; 0x388 <__floatsisf+0x5e>
 37e:	66 23       	and	r22, r22
 380:	71 f0       	breq	.+28     	; 0x39e <__floatsisf+0x74>
 382:	96 e8       	ldi	r25, 0x86	; 134
 384:	86 2f       	mov	r24, r22
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	2a f0       	brmi	.+10     	; 0x396 <__floatsisf+0x6c>
 38c:	9a 95       	dec	r25
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	88 1f       	adc	r24, r24
 394:	da f7       	brpl	.-10     	; 0x38c <__floatsisf+0x62>
 396:	88 0f       	add	r24, r24
 398:	96 95       	lsr	r25
 39a:	87 95       	ror	r24
 39c:	97 f9       	bld	r25, 7
 39e:	08 95       	ret

000003a0 <__mulsf3>:
 3a0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__mulsf3x>
 3a4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__fp_round>
 3a8:	0e 94 46 02 	call	0x48c	; 0x48c <__fp_pscA>
 3ac:	38 f0       	brcs	.+14     	; 0x3bc <__mulsf3+0x1c>
 3ae:	0e 94 4d 02 	call	0x49a	; 0x49a <__fp_pscB>
 3b2:	20 f0       	brcs	.+8      	; 0x3bc <__mulsf3+0x1c>
 3b4:	95 23       	and	r25, r21
 3b6:	11 f0       	breq	.+4      	; 0x3bc <__mulsf3+0x1c>
 3b8:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_inf>
 3bc:	0c 94 43 02 	jmp	0x486	; 0x486 <__fp_nan>
 3c0:	11 24       	eor	r1, r1
 3c2:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_szero>

000003c6 <__mulsf3x>:
 3c6:	0e 94 65 02 	call	0x4ca	; 0x4ca <__fp_split3>
 3ca:	70 f3       	brcs	.-36     	; 0x3a8 <__mulsf3+0x8>

000003cc <__mulsf3_pse>:
 3cc:	95 9f       	mul	r25, r21
 3ce:	c1 f3       	breq	.-16     	; 0x3c0 <__mulsf3+0x20>
 3d0:	95 0f       	add	r25, r21
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	55 1f       	adc	r21, r21
 3d6:	62 9f       	mul	r22, r18
 3d8:	f0 01       	movw	r30, r0
 3da:	72 9f       	mul	r23, r18
 3dc:	bb 27       	eor	r27, r27
 3de:	f0 0d       	add	r31, r0
 3e0:	b1 1d       	adc	r27, r1
 3e2:	63 9f       	mul	r22, r19
 3e4:	aa 27       	eor	r26, r26
 3e6:	f0 0d       	add	r31, r0
 3e8:	b1 1d       	adc	r27, r1
 3ea:	aa 1f       	adc	r26, r26
 3ec:	64 9f       	mul	r22, r20
 3ee:	66 27       	eor	r22, r22
 3f0:	b0 0d       	add	r27, r0
 3f2:	a1 1d       	adc	r26, r1
 3f4:	66 1f       	adc	r22, r22
 3f6:	82 9f       	mul	r24, r18
 3f8:	22 27       	eor	r18, r18
 3fa:	b0 0d       	add	r27, r0
 3fc:	a1 1d       	adc	r26, r1
 3fe:	62 1f       	adc	r22, r18
 400:	73 9f       	mul	r23, r19
 402:	b0 0d       	add	r27, r0
 404:	a1 1d       	adc	r26, r1
 406:	62 1f       	adc	r22, r18
 408:	83 9f       	mul	r24, r19
 40a:	a0 0d       	add	r26, r0
 40c:	61 1d       	adc	r22, r1
 40e:	22 1f       	adc	r18, r18
 410:	74 9f       	mul	r23, r20
 412:	33 27       	eor	r19, r19
 414:	a0 0d       	add	r26, r0
 416:	61 1d       	adc	r22, r1
 418:	23 1f       	adc	r18, r19
 41a:	84 9f       	mul	r24, r20
 41c:	60 0d       	add	r22, r0
 41e:	21 1d       	adc	r18, r1
 420:	82 2f       	mov	r24, r18
 422:	76 2f       	mov	r23, r22
 424:	6a 2f       	mov	r22, r26
 426:	11 24       	eor	r1, r1
 428:	9f 57       	subi	r25, 0x7F	; 127
 42a:	50 40       	sbci	r21, 0x00	; 0
 42c:	9a f0       	brmi	.+38     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 42e:	f1 f0       	breq	.+60     	; 0x46c <__stack+0xd>
 430:	88 23       	and	r24, r24
 432:	4a f0       	brmi	.+18     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 434:	ee 0f       	add	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	bb 1f       	adc	r27, r27
 43a:	66 1f       	adc	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	88 1f       	adc	r24, r24
 440:	91 50       	subi	r25, 0x01	; 1
 442:	50 40       	sbci	r21, 0x00	; 0
 444:	a9 f7       	brne	.-22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 446:	9e 3f       	cpi	r25, 0xFE	; 254
 448:	51 05       	cpc	r21, r1
 44a:	80 f0       	brcs	.+32     	; 0x46c <__stack+0xd>
 44c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_inf>
 450:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_szero>
 454:	5f 3f       	cpi	r21, 0xFF	; 255
 456:	e4 f3       	brlt	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 458:	98 3e       	cpi	r25, 0xE8	; 232
 45a:	d4 f3       	brlt	.-12     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 45c:	86 95       	lsr	r24
 45e:	77 95       	ror	r23
 460:	67 95       	ror	r22
 462:	b7 95       	ror	r27
 464:	f7 95       	ror	r31
 466:	e7 95       	ror	r30
 468:	9f 5f       	subi	r25, 0xFF	; 255
 46a:	c1 f7       	brne	.-16     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 46c:	fe 2b       	or	r31, r30
 46e:	88 0f       	add	r24, r24
 470:	91 1d       	adc	r25, r1
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	97 f9       	bld	r25, 7
 478:	08 95       	ret

0000047a <__fp_inf>:
 47a:	97 f9       	bld	r25, 7
 47c:	9f 67       	ori	r25, 0x7F	; 127
 47e:	80 e8       	ldi	r24, 0x80	; 128
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	08 95       	ret

00000486 <__fp_nan>:
 486:	9f ef       	ldi	r25, 0xFF	; 255
 488:	80 ec       	ldi	r24, 0xC0	; 192
 48a:	08 95       	ret

0000048c <__fp_pscA>:
 48c:	00 24       	eor	r0, r0
 48e:	0a 94       	dec	r0
 490:	16 16       	cp	r1, r22
 492:	17 06       	cpc	r1, r23
 494:	18 06       	cpc	r1, r24
 496:	09 06       	cpc	r0, r25
 498:	08 95       	ret

0000049a <__fp_pscB>:
 49a:	00 24       	eor	r0, r0
 49c:	0a 94       	dec	r0
 49e:	12 16       	cp	r1, r18
 4a0:	13 06       	cpc	r1, r19
 4a2:	14 06       	cpc	r1, r20
 4a4:	05 06       	cpc	r0, r21
 4a6:	08 95       	ret

000004a8 <__fp_round>:
 4a8:	09 2e       	mov	r0, r25
 4aa:	03 94       	inc	r0
 4ac:	00 0c       	add	r0, r0
 4ae:	11 f4       	brne	.+4      	; 0x4b4 <__fp_round+0xc>
 4b0:	88 23       	and	r24, r24
 4b2:	52 f0       	brmi	.+20     	; 0x4c8 <__fp_round+0x20>
 4b4:	bb 0f       	add	r27, r27
 4b6:	40 f4       	brcc	.+16     	; 0x4c8 <__fp_round+0x20>
 4b8:	bf 2b       	or	r27, r31
 4ba:	11 f4       	brne	.+4      	; 0x4c0 <__fp_round+0x18>
 4bc:	60 ff       	sbrs	r22, 0
 4be:	04 c0       	rjmp	.+8      	; 0x4c8 <__fp_round+0x20>
 4c0:	6f 5f       	subi	r22, 0xFF	; 255
 4c2:	7f 4f       	sbci	r23, 0xFF	; 255
 4c4:	8f 4f       	sbci	r24, 0xFF	; 255
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	08 95       	ret

000004ca <__fp_split3>:
 4ca:	57 fd       	sbrc	r21, 7
 4cc:	90 58       	subi	r25, 0x80	; 128
 4ce:	44 0f       	add	r20, r20
 4d0:	55 1f       	adc	r21, r21
 4d2:	59 f0       	breq	.+22     	; 0x4ea <__fp_splitA+0x10>
 4d4:	5f 3f       	cpi	r21, 0xFF	; 255
 4d6:	71 f0       	breq	.+28     	; 0x4f4 <__fp_splitA+0x1a>
 4d8:	47 95       	ror	r20

000004da <__fp_splitA>:
 4da:	88 0f       	add	r24, r24
 4dc:	97 fb       	bst	r25, 7
 4de:	99 1f       	adc	r25, r25
 4e0:	61 f0       	breq	.+24     	; 0x4fa <__fp_splitA+0x20>
 4e2:	9f 3f       	cpi	r25, 0xFF	; 255
 4e4:	79 f0       	breq	.+30     	; 0x504 <__fp_splitA+0x2a>
 4e6:	87 95       	ror	r24
 4e8:	08 95       	ret
 4ea:	12 16       	cp	r1, r18
 4ec:	13 06       	cpc	r1, r19
 4ee:	14 06       	cpc	r1, r20
 4f0:	55 1f       	adc	r21, r21
 4f2:	f2 cf       	rjmp	.-28     	; 0x4d8 <__fp_split3+0xe>
 4f4:	46 95       	lsr	r20
 4f6:	f1 df       	rcall	.-30     	; 0x4da <__fp_splitA>
 4f8:	08 c0       	rjmp	.+16     	; 0x50a <__fp_splitA+0x30>
 4fa:	16 16       	cp	r1, r22
 4fc:	17 06       	cpc	r1, r23
 4fe:	18 06       	cpc	r1, r24
 500:	99 1f       	adc	r25, r25
 502:	f1 cf       	rjmp	.-30     	; 0x4e6 <__fp_splitA+0xc>
 504:	86 95       	lsr	r24
 506:	71 05       	cpc	r23, r1
 508:	61 05       	cpc	r22, r1
 50a:	08 94       	sec
 50c:	08 95       	ret

0000050e <__fp_zero>:
 50e:	e8 94       	clt

00000510 <__fp_szero>:
 510:	bb 27       	eor	r27, r27
 512:	66 27       	eor	r22, r22
 514:	77 27       	eor	r23, r23
 516:	cb 01       	movw	r24, r22
 518:	97 f9       	bld	r25, 7
 51a:	08 95       	ret

0000051c <__divmodhi4>:
 51c:	97 fb       	bst	r25, 7
 51e:	07 2e       	mov	r0, r23
 520:	16 f4       	brtc	.+4      	; 0x526 <__divmodhi4+0xa>
 522:	00 94       	com	r0
 524:	07 d0       	rcall	.+14     	; 0x534 <__divmodhi4_neg1>
 526:	77 fd       	sbrc	r23, 7
 528:	09 d0       	rcall	.+18     	; 0x53c <__divmodhi4_neg2>
 52a:	0e 94 a8 02 	call	0x550	; 0x550 <__udivmodhi4>
 52e:	07 fc       	sbrc	r0, 7
 530:	05 d0       	rcall	.+10     	; 0x53c <__divmodhi4_neg2>
 532:	3e f4       	brtc	.+14     	; 0x542 <__divmodhi4_exit>

00000534 <__divmodhi4_neg1>:
 534:	90 95       	com	r25
 536:	81 95       	neg	r24
 538:	9f 4f       	sbci	r25, 0xFF	; 255
 53a:	08 95       	ret

0000053c <__divmodhi4_neg2>:
 53c:	70 95       	com	r23
 53e:	61 95       	neg	r22
 540:	7f 4f       	sbci	r23, 0xFF	; 255

00000542 <__divmodhi4_exit>:
 542:	08 95       	ret

00000544 <__tablejump2__>:
 544:	ee 0f       	add	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	05 90       	lpm	r0, Z+
 54a:	f4 91       	lpm	r31, Z
 54c:	e0 2d       	mov	r30, r0
 54e:	09 94       	ijmp

00000550 <__udivmodhi4>:
 550:	aa 1b       	sub	r26, r26
 552:	bb 1b       	sub	r27, r27
 554:	51 e1       	ldi	r21, 0x11	; 17
 556:	07 c0       	rjmp	.+14     	; 0x566 <__udivmodhi4_ep>

00000558 <__udivmodhi4_loop>:
 558:	aa 1f       	adc	r26, r26
 55a:	bb 1f       	adc	r27, r27
 55c:	a6 17       	cp	r26, r22
 55e:	b7 07       	cpc	r27, r23
 560:	10 f0       	brcs	.+4      	; 0x566 <__udivmodhi4_ep>
 562:	a6 1b       	sub	r26, r22
 564:	b7 0b       	sbc	r27, r23

00000566 <__udivmodhi4_ep>:
 566:	88 1f       	adc	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	5a 95       	dec	r21
 56c:	a9 f7       	brne	.-22     	; 0x558 <__udivmodhi4_loop>
 56e:	80 95       	com	r24
 570:	90 95       	com	r25
 572:	bc 01       	movw	r22, r24
 574:	cd 01       	movw	r24, r26
 576:	08 95       	ret

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
