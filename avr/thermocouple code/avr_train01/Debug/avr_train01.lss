
avr_train01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000656  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bf  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000258  00000000  00000000  00000da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000037  00000000  00000000  0000135e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001395  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
    DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  70:	87 bb       	out	0x17, r24	; 23
#include <util/delay.h>



int main(void)
{
  72:	e0 e0       	ldi	r30, 0x00	; 0
  74:	50 e0       	ldi	r21, 0x00	; 0
	DDRB = 0xFF;
    while (1) 
    {
		for(int8_t i = 0 ;i<8;i++ )
		{
			PORTA ^= ( 1<<i );
  76:	61 e0       	ldi	r22, 0x01	; 1
  78:	70 e0       	ldi	r23, 0x00	; 0
#include <util/delay.h>



int main(void)
{
  7a:	8e 2f       	mov	r24, r30
  7c:	95 2f       	mov	r25, r21
	DDRB = 0xFF;
    while (1) 
    {
		for(int8_t i = 0 ;i<8;i++ )
		{
			PORTA ^= ( 1<<i );
  7e:	4b b3       	in	r20, 0x1b	; 27
  80:	9b 01       	movw	r18, r22
  82:	08 2e       	mov	r0, r24
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
  86:	22 0f       	add	r18, r18
  88:	33 1f       	adc	r19, r19
  8a:	0a 94       	dec	r0
  8c:	e2 f7       	brpl	.-8      	; 0x86 <main+0x1a>
  8e:	24 27       	eor	r18, r20
  90:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f e9       	ldi	r18, 0x9F	; 159
  94:	36 e8       	ldi	r19, 0x86	; 134
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	30 40       	sbci	r19, 0x00	; 0
  9c:	40 40       	sbci	r20, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
  a4:	01 96       	adiw	r24, 0x01	; 1
{
    DDRA = 0xFF;
	DDRB = 0xFF;
    while (1) 
    {
		for(int8_t i = 0 ;i<8;i++ )
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	91 05       	cpc	r25, r1
  aa:	49 f7       	brne	.-46     	; 0x7e <main+0x12>
  ac:	e6 cf       	rjmp	.-52     	; 0x7a <main+0xe>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
